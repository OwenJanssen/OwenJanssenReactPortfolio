"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Shape = require("d3-shape");

var _d3Chord = require("d3-chord");

var _d3Scale = require("d3-scale");

var _d3Array = require("d3-array");

var _Svg = _interopRequireDefault(require("./Svg"));

var _Groups = _interopRequireDefault(require("./Groups"));

var _Ribbons = _interopRequireDefault(require("./Ribbons"));

require("./main.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ChordDiagram = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChordDiagram, _Component);

  function ChordDiagram(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      hoverPersist: false,
      mouseOverGroup: null,
      mouseOverRibbon: null
    });

    _this.clearHover = _this.clearHover.bind(_assertThisInitialized(_this));
    _this.setHoverPersist = _this.setHoverPersist.bind(_assertThisInitialized(_this));
    _this.setMouseOverGroup = _this.setMouseOverGroup.bind(_assertThisInitialized(_this));
    _this.setMouseOverRibbon = _this.setMouseOverRibbon.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ChordDiagram.prototype;

  _proto.clearHover = function clearHover() {
    this.setState({
      hoverPersist: false,
      mouseOverGroup: null,
      mouseOverRibbon: null
    });
  };

  _proto.setHoverPersist = function setHoverPersist(hoverPersist) {
    if (this.props.persistHoverOnClick) {
      this.setState({
        hoverPersist: hoverPersist
      });
    }
  };

  _proto.setMouseOverGroup = function setMouseOverGroup(mouseOverGroup) {
    this.setState({
      mouseOverGroup: mouseOverGroup
    });
  };

  _proto.setMouseOverRibbon = function setMouseOverRibbon(mouseOverRibbon) {
    this.setState({
      mouseOverRibbon: mouseOverRibbon
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        matrix = _this$props.matrix,
        componentId = _this$props.componentId,
        width = _this$props.width,
        height = _this$props.height,
        style = _this$props.style,
        className = _this$props.className,
        groupLabels = _this$props.groupLabels,
        groupColors = _this$props.groupColors,
        groupOnClick = _this$props.groupOnClick,
        padAngle = _this$props.padAngle,
        sortGroups = _this$props.sortGroups,
        sortSubgroups = _this$props.sortSubgroups,
        sortChords = _this$props.sortChords,
        labelColors = _this$props.labelColors,
        disableHover = _this$props.disableHover,
        disableGroupHover = _this$props.disableGroupHover,
        disableRibbonHover = _this$props.disableRibbonHover,
        strokeWidth = _this$props.strokeWidth,
        resizeWithWindow = _this$props.resizeWithWindow,
        ribbonOnClick = _this$props.ribbonOnClick,
        blurOnHover = _this$props.blurOnHover,
        ribbonOpacity = _this$props.ribbonOpacity,
        ribbonBlurOpacity = _this$props.ribbonBlurOpacity,
        persistHoverOnClick = _this$props.persistHoverOnClick,
        svgOnClick = _this$props.svgOnClick;
    var outerRadius = this.props.outerRadius || Math.min(width, height) * 0.5 - 40;
    var innerRadius = this.props.innerRadius || outerRadius - 30;
    var d3Chord = (0, _d3Chord.chord)().padAngle(padAngle).sortGroups(sortGroups).sortSubgroups(sortSubgroups).sortChords(sortChords);
    var chords = d3Chord(matrix);
    var d3Arc = (0, _d3Shape.arc)().innerRadius(innerRadius).outerRadius(outerRadius);
    var d3Ribbon = (0, _d3Chord.ribbon)().radius(innerRadius);
    var color = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(groupColors.length)).range(groupColors);
    return /*#__PURE__*/_react["default"].createElement(_Svg["default"], {
      width: width,
      height: height,
      style: style,
      className: className,
      clearHover: this.clearHover,
      resizeWithWindow: resizeWithWindow,
      onClick: svgOnClick
    }, /*#__PURE__*/_react["default"].createElement(_Groups["default"], {
      componentId: componentId,
      chords: chords,
      color: color,
      arc: d3Arc,
      outerRadius: outerRadius,
      setMouseOverGroup: this.setMouseOverGroup,
      groupLabels: groupLabels,
      labelColors: labelColors,
      disableHover: disableHover || disableGroupHover,
      hoverPersist: this.state.hoverPersist,
      setHoverPersist: this.setHoverPersist,
      onClick: groupOnClick
    }), /*#__PURE__*/_react["default"].createElement(_Ribbons["default"], {
      chords: chords,
      color: color,
      disableHover: disableHover || disableRibbonHover,
      ribbon: d3Ribbon,
      setMouseOverRibbon: this.setMouseOverRibbon,
      mouseOverGroup: this.state.mouseOverGroup,
      mouseOverRibbon: this.state.mouseOverRibbon,
      strokeWidth: strokeWidth,
      hoverPersist: this.state.hoverPersist,
      setHoverPersist: this.setHoverPersist,
      onClick: ribbonOnClick,
      blurOnHover: blurOnHover,
      ribbonOpacity: ribbonOpacity,
      ribbonBlurOpacity: ribbonBlurOpacity
    }));
  };

  return ChordDiagram;
}(_react.Component);

exports["default"] = ChordDiagram;

_defineProperty(ChordDiagram, "defaultProps", {
  matrix: [],
  componentId: 1,
  width: 700,
  height: 700,
  style: {},
  className: '',
  outerRadius: null,
  innerRadius: null,
  groupLabels: [],
  groupColors: [],
  groupOnClick: null,
  padAngle: 0.05,
  sortGroups: null,
  sortSubgroups: _d3Array.descending,
  sortChords: null,
  labelColors: ['#000000'],
  disableHover: false,
  disableGroupHover: false,
  disableRibbonHover: true,
  strokeWidth: 1,
  resizeWithWindow: false,
  ribbonOnClick: null,
  blurOnHover: false,
  ribbonOpacity: '0.67',
  ribbonHoverOpacity: '0.2',
  persistHoverOnClick: false,
  svgOnClick: null
});

ChordDiagram.propTypes = process.env.NODE_ENV !== "production" ? {
  matrix: _propTypes["default"].array.isRequired,
  componentId: _propTypes["default"].number.isRequired,
  width: _propTypes["default"].number,
  height: _propTypes["default"].number,
  style: _propTypes["default"].object,
  className: _propTypes["default"].string,
  outerRadius: _propTypes["default"].number,
  innerRadius: _propTypes["default"].number,
  groupLabels: _propTypes["default"].array,
  groupColors: _propTypes["default"].array,
  padAngle: _propTypes["default"].number,
  sortGroups: _propTypes["default"].func,
  sortSubgroups: _propTypes["default"].func,
  sortChords: _propTypes["default"].func,
  labelColors: _propTypes["default"].array,
  disableHover: _propTypes["default"].bool,
  disableGroupHover: _propTypes["default"].bool,
  disableRibbonHover: _propTypes["default"].bool,
  strokeWidth: _propTypes["default"].number,
  resizeWithWindow: _propTypes["default"].bool,
  groupOnClick: _propTypes["default"].func,
  ribbonOnClick: _propTypes["default"].func,
  svgOnClick: _propTypes["default"].func,
  blurOnHover: _propTypes["default"].bool,
  ribbonOpacity: _propTypes["default"].string,
  ribbonHoverOpacity: _propTypes["default"].string,
  persistHoverOnClick: _propTypes["default"].bool
} : {};
module.exports = exports.default;